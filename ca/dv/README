////////////////////////////////////////////////////////////////////////////////////////////////////
//
//        Copyright (C) 2021 Eximius Design
//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Functional Descript: Channel Alignment Testbench File
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////

cmd to run test:
-----------------------------------------------------------------------------------------
1. Go to directory '/design/ca/dv/scripts'
2. Use command :   python3 run_all_sim.py copy -d MY_TEST1 -cfg sailrock_cfg.txt
   This will help create a directory named <MY_TEST1> in parallel to 'scripts' under 'dv' folder.
   User may choose any name in place of MY_TEST1
3. Go to directory '../MY_TEST1'
4. Running a single Test-Case

   #A] Use command:  ./run_sim
       This will run 'ca_basic_test_c' test-sequence
   
   #B] In order to run a specific test-case:
       Copy the specific sailrock file from /ca/dv/examples/ to the MY_TEST1 directory and rename it as sailrock_cfg.txt
       Use command:  ./run_sim test_case_class_name

       Both, #A]  and #B]  the wave dump will happen by default and Coverage will not

       The following extra arguments control the Wave Dump and coverage enable/disable options {use ONLY 1 of these at a time}
           nowaves     :::: No WAVE DUMP    NO Coverage Enabled
           cov_nowaves :::: No WAVE DUMP    Coverage Enabled 
           cov_waves   :::: WAVE DUMP   and  Coverage Both Enabled
       e.g.
           ./run_sim  ca_basic_test_c   cov_nowaves

5. Regression mode:
          #A] Nightly run mode :
              [/ca/dv/run_nightly.sh  :: Alter line # 'cov_wave_opt=nowaves'  to  'cov_wave_opt=cov_nowaves' if Coverage is needed Enabled]
              Go to:  /ca/dv/ 
              Run command:  sh ./run_nightly.sh

              Results path:
                     /ca/dv/nightly/test_*/ca_tb.log
                     /ca/dv/nightly/test_*/cov_work   {with cov_nowaves option used}
                        {user needs to merge all test_*/cov_work to observe coverage with IMC (cadence)}
                     /ca/dv/nightly_results.txt

          #B] Constrained Random sailrock regression mode :
              [/ca/dv/run_regression.sh  :: Alter line # 'run_cmd= ... nowaves'  to 'run_cmd= ... cov_nowaves' if Coverage is needed Enabled]
              Go to:          /ca/dv/cfg_list
              [Edit file 'ca_gen_cfg.py' line# MAX_SAILROCK_TO_GEN = 999   for max needed sailrock_cfg.txt to be generated] << optional step
              Run command:    python  ca_gen_cfg.py     {sailrock generation}
              Results path:   /ca/dv/cfg_list/sailrock_array/   <<<test_nnn_*_sailrock_cfg.txt>>>  where nnn is progressive integer

              To run actual regression:
              Go to:          /ca/dv/
              Run command:    
                              sh ./run_regression.sh

              Results path:
                             /ca/dv/regression/test_nnn_*/ca_tb.log
                             /ca/dv/regression/test_nnn_*/cov_work   {with cov_nowaves option used}
                                {user needs to merge all test_*/cov_work to observe coverage with IMC (cadence)}
                             /ca/dv/regression_results.txt


------------------------------------------------------------------------------------------

----------------------
CA Directory Structure 
----------------------
design
|
├── ca
│   ├── doc
│   │   └── ca_ug.pdf
│   ├── rtl
│   ├── dv
        ├── ca_cov_refine_summary.txt
        ├── ca_no_shm.tcl
        ├── ca_pkg.svh
        ├── ca_shm.tcl
        ├── cfg_list
        │   ├── ca_gen_cfg.py
        │   ├── README
        ├── examples
        │   ├── delay_00000015_sailrock_cfg.txt
        │   ├── delay_01010101_sailrock_cfg.txt
        │   ├── delay_015151515_sailrock_cfg.txt
        │   ├── delay_0_sailrock_cfg.txt
        │   ├── full_pfull_ch0_sailrock_cfg.txt
        │   ├── full_pfull_ch7_sailrock_cfg.txt
        │   ├── full_pfull_sailrock_cfg.txt
        │   ├── GEN1_f2f_sailrock_cfg.txt
        │   ├── GEN1_f2h_sailrock_cfg.txt
        │   ├── GEN1_h2f_sailrock_cfg.txt
        │   ├── GEN1_h2h_sailrock_cfg.txt
        │   ├── inter_ch_skew15_32_ch0_sailrock_c
        │   ├── inter_ch_skew15_32_sailrock_cfg.t
        │   ├── m2s1_f2h_sailrock_cfg.txt
        │   ├── M2S1_GEN1_F2H_sailrock_cfg.txt
        │   ├── M2S2_GEN2_F2F_align_error_fifo16_
        │   ├── M2S2_GEN2_F2F_align_error_fifo32_
        │   ├── M2S2_GEN2_F2F_align_error_fifo8_s
        │   ├── M2S2_GEN2_F2F_ALIGN_FLY1_sailrock
        │   ├── M2S2_GEN2_F2F_fifo_depth16_sailro
        │   ├── M2S2_GEN2_F2F_fifo_depth8_sailroc
        │   ├── M2S2_GEN2_F2F_no_ch_delay_async_f
        │   ├── M2S2_GEN2_F2F_no_ch_delay_sync_fi
        │   ├── M2S2_GEN2_F2F_rden_dly2_sailrock_
        │   ├── M2S2_GEN2_F2F_rden_dly4_sailrock_
        │   ├── M2S2_GEN2_F2F_rden_dly6_sailrock_
        │   ├── M2S2_GEN2_F2F_sailrock_cfg.txt
        │   ├── M2S2_GEN2_F2H_sailrock_cfg.txt
        │   ├── M2S2_GEN2_F2Q_sailrock_cfg.txt
        │   ├── M2S2_GEN2_H2F_sailrock_cfg.txt
        │   ├── M2S2_GEN2_H2H_sailrock_cfg.txt
        │   ├── M2S2_GEN2_H2Q_sailrock_cfg.txt
        │   ├── M2S2_GEN2_Q2F_sailrock_cfg.txt
        │   ├── M2S2_GEN2_Q2H_sailrock_cfg.txt
        │   ├── M2S2_GEN2_Q2Q_CH24_sailrock_cfg.t
        │   ├── M2S2_GEN2_Q2Q_MARKER_78_sailrock_
        │   ├── M2S2_GEN2_Q2Q_sailrock_cfg.txt
        │   ├── num_ch2_sailrock_cfg.txt
        │   ├── sync_fifo0_afly1_sailrock_cfg.txt
        │   └── sync_fifo0_sailrock_cfg.txt
        ├── export_src
        │   ├── ca_coverage.sv
        │   ├── ca_data_pkg.svh
        │   ├── ca_rx_tb_in_agent.sv
        │   ├── ca_rx_tb_in_cfg.sv
        │   ├── ca_rx_tb_in_drv.sv
        │   ├── ca_rx_tb_in_if.sv
        │   ├── ca_rx_tb_in_mon.sv
        │   ├── ca_rx_tb_in_pkg.svh
        │   ├── ca_rx_tb_in_seqr.sv
        │   ├── ca_scoreboard.sv
        │   ├── ca_seq_item.sv
        │   ├── ca_tx_tb_in_agent.sv
        │   ├── ca_tx_tb_in_cfg.sv
        │   ├── ca_tx_tb_in_drv.sv
        │   ├── ca_tx_tb_in_if.sv
        │   ├── ca_tx_tb_in_mon.sv
        │   ├── ca_tx_tb_in_pkg.svh
        │   ├── ca_tx_tb_in_seqr.sv
        │   ├── ca_tx_tb_out_agent.sv
        │   ├── ca_tx_tb_out_cfg.sv
        │   ├── ca_tx_tb_out_drv.sv
        │   ├── ca_tx_tb_out_if.sv
        │   ├── ca_tx_tb_out_mon.sv
        │   ├── ca_tx_tb_out_pkg.svh
        │   ├── ca_tx_tb_out_seqr.sv
        │   ├── chan_delay_agent
        │   │   ├── chan_delay_agent.sv
        │   │   ├── chan_delay_cfg.sv
        │   │   ├── chan_delay_drv.sv
        │   │   ├── chan_delay_if.sv
        │   │   ├── chan_delay_mon.sv
        │   │   ├── chan_delay_pkg.svh
        │   │   ├── chan_delay_seq_item.sv
        │   │   └── chan_delay_seqr.sv
        ├── imc.cmd
        ├── local_src
        │   ├── ca_gen_if.sv
        ├── README   <<< THIS FILE>>>
        ├── run_nightly.sh
        ├── run_regression.sh
        ├── run_smoke.sh
        ├── scripts
        │   ├── aib_cfg_default.txt
        │   ├── aib_gen_config
        │   ├── aib_gen_parser.py
        │   ├── ca_cfg_default.txt
        │   ├── ca_gen_parser.pl
        │   ├── ca_gen_parser.py
        │   ├── makefile
        │   ├── readme
        │   ├── run_all_sim.py
        │   ├── run_sim
        │   ├── sailrock_cfg.txt
        │   └── target_cfg.txt
        ├── seqs
        │   ├── ca_rx_traffic_seq.sv
        │   ├── ca_seq_lib.sv
        │   ├── ca_traffic_seq.sv
        │   ├── ca_tx_traffic_seq.sv
        │   └── virt_seqr.sv
        ├── submit_group.pl
        ├── tb
        │   ├── aib_tb_tasks.svi
        │   ├── ca_DUT_wrapper.sv
        │   ├── ca_GENERATED_defines.svh
        │   ├── ca_top_env.sv
        │   ├── ca_top_tb.f
        │   ├── ca_top_tb.sv
        ├── tests
        │   ├── base_ca_test.sv
        │   ├── ca_afly1_stb_incorrect_intv_test.
        │   ├── ca_afly1_stb_intv_variations_test
        │   ├── ca_afly_toggling_test.sv
        │   ├── ca_align_error_test.sv
        │   ├── ca_all_wd_sel_39th_bit_sel_test.s
        │   ├── ca_aln_err_afly0_by_incorrect_stb
        │   ├── ca_aln_err_by_incorrect_stb_test.
        │   ├── ca_basic_test.sv
        │   ├── ca_cfg.sv
        │   ├── ca_delay_x_xz_values_test.sv
        │   ├── ca_fifo_ptr_values_variations_tes
        │   ├── ca_knobs.sv
        │   ├── ca_no_external_strobes_test.sv
        │   ├── ca_rden_dly_test.sv
        │   ├── ca_reset_during_traffic_test.sv
        │   ├── ca_stb_all_bit_sel_test.sv
        │   ├── ca_stb_en0_aft_aln_done_test.sv
        │   ├── ca_stb_enb_high_low_high_test.sv
        │   ├── ca_stb_intv_stb_pos_test.sv
        │   ├── ca_stb_intv_walking_ones_test.sv
        │   ├── ca_stb_rcvr_aft_aln_done_test.sv
        │   ├── ca_stb_rcvr_enb_test.sv
        │   ├── ca_stb_wd_sel_bit_sel_test.sv
        │   ├── ca_stb_wd_sel_Q2Q_test.sv
        │   ├── ca_stb_wd_sel_test.sv
        │   ├── ca_strobe_error_test.sv
        │   ├── ca_toggle_cover_test.sv
        │   ├── ca_traffic_reset_traffic_test.sv
        │   ├── ca_tx_rx_online_test.sv
        │   ├── ca_wd_bit_sel_ones_cover_test.sv
        │   ├── ca_with_external_strobes_test.sv
